minimum-vagga: v0.6.1

_templates:
  local_volumes: &local_volumes
    /config: !BindRO /work/config/local
  snippets:
    - &trunk_stuff
      - !Copy
        source: /work/config/trunk
        path: /config
      - !EnsureDir /log
      - !EnsureDir /lithos
      - !Copy
        source: /work/lithos/trunk
        path: /lithos
    - &production_stuff
      - !Copy
        source: /work/config/production
        path: /config
      - !EnsureDir /local
      - !EnsureDir /log
      - !EnsureDir /lithos
      - !Copy
        source: /work/lithos/production
        path: /lithos
    - &host_resolution
      - !EnsureDir /state
      - !Sh |
          /bin/ln -sfn /state/hosts /etc/hosts
          /bin/ln -sfn /state/resolv.conf /etc/resolv.conf
  environ:
    local_db: &local_db
      DB_HOST: 127.0.0.1
      DB_DATABASE: stories
      DB_USERNAME: celestia
      DB_PASSWORD: solar_eclipse

containers:
  _base_alpine:
    setup:
    - !Alpine v3.5
    - !AlpineRepo {branch: edge, repo: main, tag: main}
    - !AlpineRepo {branch: edge, repo: testing, tag: testing}
    - !AlpineRepo {branch: edge, repo: community, tag: community}
    - !EnsureDir /config
    - !Sh "chmod +r /bin/bbsuid"

  frontend:
    setup:
    - !Container _base_alpine
    - !NpmDependencies
      file: package.json
      peer: true
      optional: true
      dev: true
    environ:
      NODE_PATH: /usr/lib/node_modules

  static-trunk:
    setup:
    - !Container frontend
    - !EnsureDir /static
    - !Copy
      source: /work/assets
      path: /tmp/assets
    - !Copy
      source: /work/gulpfile.js
      path: /tmp/gulpfile.js
    - !Env
      NODE_PATH: /usr/lib/node_modules
      NODE_ENV: production
    - !RunAs
      work-dir: /tmp
      script: gulp assets
    - !Copy
      source: /tmp/static
      path: /static
    data-dirs: [/static]

  redis-dev:
    setup:
    - !Container _base_alpine
    - !Install [redis]
    - !EnsureDir /storage
    volumes:
      <<: *local_volumes
      /storage: !Tmpfs
        size: 128Mi
        mode: 0o1700

  redis-trunk:
    setup:
    - !Container redis-dev
    - !*Unpack
      - *trunk_stuff
      - *host_resolution
    resolv-conf-path: /state/resolv.conf
    hosts-file-path: /state/hosts

  redis-production:
    setup:
    - !Container redis-dev
    - !*Unpack
      - *production_stuff
      - *host_resolution
    resolv-conf-path: /state/resolv.conf
    hosts-file-path: /state/hosts

  nginx:
    setup:
    - !Container _base_alpine
    - !Install [nginx]
    volumes:
      <<: *local_volumes
      /var/log/nginx: !Snapshot

  sphinx-dev:
    setup:
    - !Container _base_alpine
    - !Install [sphinx@community]
    - !EnsureDir /storage
    volumes:
      <<: *local_volumes
      /storage: !Persistent {name: sphinx}

  sphinx-trunk:
    setup:
    - !Container sphinx-dev
    - !*Unpack
      - *trunk_stuff
      - *host_resolution
    resolv-conf-path: /state/resolv.conf
    hosts-file-path: /state/hosts

  sphinx-production:
    setup:
    - !Container sphinx-dev
    - !*Unpack
      - *production_stuff
      - *host_resolution
    resolv-conf-path: /state/resolv.conf
    hosts-file-path: /state/hosts

  mysql-dev:
    setup:
    - !Container _base_alpine
    # TODO: Replace with ordinary install when https://github.com/alpinelinux/aports/pull/808/files will be merged
    - !Download
      url: https://files.everypony.org/alpine/testing/x86_64/xtrabackup-2.4.5-r0.apk
      path: /tmp/xtrabackup-2.4.5-r0.apk
    - !Sh apk add /tmp/xtrabackup-2.4.5-r0.apk --allow-untrusted
    - !Install
      - mariadb
      - mariadb-client
      - perl
      - perl-dbd-mysql
    - !EnsureDir /storage
    - !EnsureDir /backup
    volumes:
      /storage: !Persistent
        name: mysql
        init-command: _init_db
      /backup: !Persistent {name: backup}
      /etc/mysql: !BindRO /work/config/local/mysql

  mysql-trunk:
    setup:
    - !Container mysql-dev
    - !*Unpack
      - *trunk_stuff
      - *host_resolution
    - !Copy
      source: /config/mysql
      path: /etc/mysql
    resolv-conf-path: /state/resolv.conf
    hosts-file-path: /state/hosts

  mysql-production:
    setup:
    - !Container mysql-dev
    - !*Unpack
      - *production_stuff
      - *host_resolution
    - !Copy
      source: /config/mysql
      path: /etc/mysql
    resolv-conf-path: /state/resolv.conf
    hosts-file-path: /state/hosts

  uwsgi-dev:
    setup:
    - !Container _base_alpine
    - !Install
      - uwsgi-python3
      - libxslt-dev
      - mariadb-dev
      - ca-certificates
    - !Py3Requirements requirements.txt
    volumes:
      <<: *local_volumes

commands:
  _init_db: !Command
    description: Initialize and populate MySQL database
    container: mysql-dev
    environ: *local_db
    run: !*Include vagga/init_db.yaml

  _load_fixture: !Command
    description: Load fixture into database
    container: mysql-dev
    environ: *local_db
    accepts-arguments: true
    run: !*Include vagga/load_fixture.yaml

  mysql: &mysql !Command
    container: mysql-dev
    description: Run mysql database server
    user-id: 1
    external-user-id: 0
    run: mysqld_safe --skip-syslog --console --debug-gdb

  redis-cli: &redis !Command
    container: redis-dev
    description: Run redis CLI
    run: [redis-cli]

  redis: &redis !Command
    container: redis-dev
    description: Run redis server (cache and broker for celery)
    run: redis-server /config/redis/redis.conf

  nginx: &nginx !Command
    container: nginx
    description: Run nginx webserver
    run: nginx -c /config/nginx/nginx.conf

  sphinx: &sphinx !Command
    container: sphinx-dev
    description: Run sphinx search service
    run:
    - searchd
    - --console
    - --config
    - /config/sphinx/sphinx.conf

  uwsgi: &uwsgi !Command
    container: uwsgi-dev
    description: Run application
    environ:
      DJANGO_SETTINGS_MODULE: ponyFiction.settings.development
    run:
      - uwsgi
      - /config/uwsgi/uwsgi.ini

  gulp: !Command
    container: frontend
    description: Gulp command
    run: [gulp]

  run: !Supervise
    description: Run full server stack
    kill-unresponsive-after: 5
    children:
      redis: *redis
      mysql: *mysql
      sphinx: *sphinx
      uwsgi: *uwsgi
      nginx: *nginx
